@include std::string
@include std::sys
// This is the interface that accepts any type 
interface any t => {} 

class <t impl any> vector => {
  private arr: t*,
  private count: int,
  private cap: int,
  public vector() => {
    self::count => 0;
    self::cap => 16;
    self::arr => malloc(self::cap * @size t);
  },
  public at(i: int): t => {
    if i < (self::count) => {
      return self::arr[i];
    }
    (@as string "Could not access element at index " + i + " out of " + (self::count - 1))::println();
    exit(1);
  },
  public append(elem: t): void => {
    if self::count + 1 >= (self::cap) => {
      self::cap => self::cap * 2;
      let old_elems: t * => self::arr;
      self::arr => malloc(self::cap * @size t);
      let i: int => 0;
      while i < (self::count) => {
        self::arr[i] => old_elems[i];
        i => i + 1;
      }
      free(old_elems);
    } 
    self::arr[self::count] => elem;
    self::count => self::count + 1;
  },
  public destroy(): void => {
    free(self::arr);
    self::count => 0;
    self::cap => 0;
    self::arr => 0;
  }
}

let main(): int => {
  (@as string "Hello, World !")::println();
  let v: vector<int>;
  let i: int => 0;
  while i < 10000 => {
    v::append(2 * i + 1);
    i => i + 1;
  }
  (@as string (v::at(6540)))::println();

  return 0;
}